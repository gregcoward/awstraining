{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a single 3 NIC BIG-IP, and attaches it to an existing Kubernetes VPC.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Basics"
                    },
                    "Parameters": [
                        "KeyName",
                        "adminUsername",
                        "adminPassword",
                        "BIGIPName"
                    ]
                },
                {
                    "Label": {
                        "default": "Size"
                    },
                    "Parameters": [
                        "BIGIPInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Settings"
                    },
                    "Parameters": [
                        "BIGIPAMI"
                    ]
                },
                {
                    "Label": {
                        "default": "K8's Environment Information"
                    },
                    "Parameters": [                        
                        "internalSubnet",
                        "assignedStackName",
                        "S3BucketName"

                    ]
                }
            ],
            "ParameterLabels": {}
        }
    },
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        },
        "adminUsername": {
            "Type": "String",
            "Description": "An admin username for loging into the application connector.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "adminPassword": {
            "Type": "String",
            "NoEcho": "true",
            "Description": "A password that will be used to login into the applicaiton connector.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "BIGIPName": {
            "Description": "The name of the BIG-IP.",
            "Type": "String"
        },
        "BIGIPInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m4.xlarge",
            "AllowedValues": [
                "m4.xlarge"
            ],
            "ConstraintDescription": "Choose one of these."
        },
        "BIGIPAMI": {
            "Description": "F5 BIG-IP AMI to install from.",
            "Type": "String",
            "Default": "ami-8633efe6",
            "AllowedValues": [
                "ami-8633efe6",
                "ami-0b7a011c",
                "ami-25002540"
            ]
        },
        "assignedStackName": {
            "Description": "The name of the Lab 10 Stack you were assigned.",
            "Type": "String"
        },
        "internalSubnet": {
            "Description": "This is the subnet that the Kubernetes Cluster is connected to.  Please select from the list.",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "S3BucketName": {
            "Description": "The name of the S3 bucket that contains the private key and container connector tar ball.",
            "Type": "String"
        }
    },
    "Resources": {
        "mgmtSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Fn::ImportValue": {"Fn::Sub": "${assignedStackName}-StackVPC" }
                },
                "AvailabilityZone": {"Fn::Join": ["",[{"Ref": "AWS::Region"},"a"]]},
                "CidrBlock": "10.10.5.0/24",
                "MapPublicIpOnLaunch": true,                
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "mgmtSubnet"
                    }
                ]
            }
        },
        "MgmtRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Fn::ImportValue": {"Fn::Sub": "${assignedStackName}-StackVPC" }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "MgmtRouteTable-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "MgmtRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "MgmtRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Fn::ImportValue": {"Fn::Sub": "${assignedStackName}-StackInternetGateway" }
                }
            }
        },
        "MgmtSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "mgmtSubnet"
                },
                "RouteTableId": {
                    "Ref": "MgmtRouteTable"
                }
            }
        },
        "BIGIPSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and RDP",
                "VpcId": {
                    "Fn::ImportValue": {"Fn::Sub": "${assignedStackName}-StackVPC" }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8443",
                        "ToPort": "8443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "10.10.0.0/16"
                    }
                ]
            }
        },
        "BIGIPMgmtEip": {
            "Type": "AWS::EC2::EIP"
        },
        "BIGIPMgmtEipAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "BIGIPMgmtEip",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "BigipMGMTInterface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "BigipMGMTInterface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            }
        },
        "BIGIPExternalEip": {
            "Type": "AWS::EC2::EIP"
        },
        "BIGIPExternalEipAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "BIGIPExternalEip",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "BigipExternalInterface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "BigipExternalInterface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            }
        },
        "BIGIPExternalVIPEip": {
            "Type": "AWS::EC2::EIP"
        },
        "BIGIPExternalVIPEipAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "BIGIPExternalVIPEip",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "BigipExternalInterface"
                },
                "PrivateIpAddress": {
                    "Fn::Select": ["0",{"Fn::GetAtt": ["BigipExternalInterface","SecondaryPrivateIpAddresses"]}]
                }
            }
        },
        "BigipExternalInterface": {
            "Properties": {
                "Description": "Public External Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "BIGIPSecurityGroup"
                    }
                ],
                "SecondaryPrivateIpAddressCount": "1",
                "SubnetId": {
                    "Fn::ImportValue": {"Fn::Sub": "${assignedStackName}-externalSubnet" }
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "BigipInternalInterface": {            
            "Properties": {
                "Description": "Internal Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Fn::ImportValue": {"Fn::Sub": "${assignedStackName}-KopsInstanceSecurityGroup" }
                    }
                ],
                "SubnetId": {
                    "Ref": "internalSubnet"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "BigipMGMTInterface": {
            "Properties": {
                "Description": "MGMT Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "BIGIPSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "mgmtSubnet"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "BIGIPS3Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/"                
            }
        },
        "BIGIPS3Policy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "BIGIPS3Policy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:*"
                            ],
                            "Resource": [
                                "arn:aws:s3:::f5awstraining2017/*"
                            ]
                        }                        
                    ]
                },
                "Roles": [
                    {
                        "Ref": "BIGIPS3Role"
                    }
                ]
            }
        },
        "BIGIPInstanceProfile":{
            "Type": "AWS::IAM::InstanceProfile",
            "Properties":{
                "Roles": [ {"Ref": "BIGIPS3Role"} ],
                "Path": "/"
            }
        },
        "BIGIPInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/config/cloud/aws/createUser.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "#f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword\n",
                                            "#PASSWORD=$(/bin/sed -e $'s:[\\'\"%{};/|#\\x20\\\\\\\\]:\\\\\\\\&:g' < /config/cloud/aws/.adminPassword)\n",
                                            "PASSWORD=",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "\n",
                                            "if [ \"$1\" = admin ]; then\n",
                                            "    tmsh modify auth user \"$1\" password ${PASSWORD}\n",
                                            "else\n",
                                            "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }\n",
                                            "fi\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/rm-password.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "date\n",
                                            "echo 'starting rm-password.sh'\n",
                                            "rm /config/cloud/aws/.adminPassword\n",
                                            "date\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/f5-cloud-libs-aws.tar.gz": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v1.0.1/dist/f5-cloud-libs-aws.tar.gz"
                            },
                            "/config/cloud/f5-cloud-libs.tar.gz": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v2.1.0/dist/f5-cloud-libs.tar.gz"
                            },
                            "/config/getNameServer.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "INTERFACE=$1",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                                            "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                                            "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                                            "echo $NAME_SERVER"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/installCloudLibs.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "echo about to execute",
                                            "checks=0",
                                            "while [ $checks -lt 120 ]; do echo checking mcpd",
                                            "    tmsh -a show sys mcp-state field-fmt | grep -q running",
                                            "    if [ $? == 0 ]; then",
                                            "        echo mcpd ready",
                                            "        break",
                                            "    fi",
                                            "    echo mcpd not ready yet",
                                            "    let checks=checks+1",
                                            "    sleep 10",
                                            "done",
                                            "echo loading verifyHash script",
                                            "if ! tmsh load sys config merge file /config/verifyHash; then",
                                            "    echo cannot validate signature of /config/verifyHash",
                                            "    exit",
                                            "fi",
                                            "echo loaded verifyHash",
                                            "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
                                            "for fileToVerify in \"${filesToVerify[@]}\"",
                                            "do",
                                            "    echo verifying \"$fileToVerify\"",
                                            "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
                                            "        echo \"$fileToVerify\" is not valid",
                                            "        exit 1",
                                            "    fi",
                                            "    echo verified \"$fileToVerify\"",
                                            "done",
                                            "mkdir -p /config/cloud/aws/node_modules",
                                            "echo expanding f5-cloud-libs.tar.gz",
                                            "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules",
                                            "touch /config/cloud/cloudLibsReady"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/verifyHash": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "cli script /Common/verifyHash {",
                                            "    proc script::run {} {",
                                            "        if {[catch {",
                                            "            set hashes(f5-cloud-libs.tar.gz) a6a9db3b89bbd014413706f22fa619c3717fac41fc99ffe875589c90e9b85a05cea227c134ea6e5b519c8fee0d12f2175368e75917f31f447ece3d92f31814af",
                                            "            set hashes(f5-cloud-libs-aws.tar.gz) 22b554337b27802b7794206462bb98d346a7241622c11bcf9e834a06bcd1bd1b5b99efee512ac6eebe64e9d34f3024bcb569371fd4ee79006761bc5e5a74a59c",
                                            "            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0",
                                            "            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034",
                                            "            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe",
                                            "",
                                            "            set file_path [lindex $tmsh::argv 1]",
                                            "            set file_name [file tail $file_path]",
                                            "",
                                            "            if {![info exists hashes($file_name)]} {",
                                            "                tmsh::log err \"No hash found for $file_name\"",
                                            "                exit 1",
                                            "            }",
                                            "",
                                            "            set expected_hash $hashes($file_name)",
                                            "            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
                                            "            if { $expected_hash eq $computed_hash } {",
                                            "                exit 0",
                                            "            }",
                                            "            tmsh::log err \"Hash does not match for $file_path\"",
                                            "            exit 1",
                                            "        }]} {",
                                            "            tmsh::log err {Unexpected error in verifyHash}",
                                            "            exit 1",
                                            "        }",
                                            "    }",
                                            "    script-signature QmpupbE2kzw2T7LO/Hp6NtscwZnEXjq8U0xOQLOfFIid1pdvsis6HOphdKyXjY+uzFnHktSy/Xe2LdwxjKmKRaMy5ZuE8NR+MJyUGLR3OwgVj1sGVZgwDCWvkBLyNKDQFkFfuTBk6TTN7q58+dJ3qulOv7KWkpKq/m8+8VXyQ4pj+96bHWwrs8kYRtHX5wc7cSJE/3thNWCF8v9BAyFFUFEyy6z7mFhH8iD2i+OEnqpK+0VAY1irspmaCigo3NmJXfZXIo2cWIopORqWsCATsVT6lunpV6z7h2FipnMJpAhVWqlzezSAOCHI0juPeGDAHIyNX8uLlTOpWJSgP1d4YQ==",
                                            "}",
                                            ""
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/waitThenRun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "while true; do echo \"waiting for cloud libs install to complete\"",
                                            "    if [ -f /config/cloud/cloudLibsReady ]; then",
                                            "        break",
                                            "    else",
                                            "        sleep 10",
                                            "    fi",
                                            "done",
                                            "\"$@\""
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/signalDone.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-signal -e $? '",
                                            {
                                                "Ref": "BIGIPWaitHandle"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/vs_config.yaml":{
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "kind: ConfigMap\n",
                                            "apiVersion: v1\n",
                                            "metadata:\n",
                                            "  name: example-vs\n",
                                            "  namespace: default\n",
                                            "  labels:\n",
                                            "    f5type: virtual-server\n",
                                            "data:\n",
                                            "  schema: \"f5schemadb://bigip-virtual-server_v0.1.2.json\"\n",
                                            "  data: |\n",
                                            "    {\n",
                                            "      \"virtualServer\": {\n",
                                            "        \"backend\": {\n",
                                            "          \"servicePort\": 80,\n",
                                            "          \"serviceName\": \"my-nginx\",\n",
                                            "          \"healthMonitors\": [{\n",
                                            "            \"interval\": 30,\n",
                                            "            \"protocol\": \"http\",\n",
                                            "            \"send\": \"GET /\\\\r\\\\n\",\n",
                                            "            \"timeout\": 86400\n",
                                            "          }]\n",
                                            "        },\n",
                                            "        \"frontend\": {\n",
                                            "          \"virtualAddress\": {\n",
                                            "            \"port\": 80,\n",
                                            "            \"bindAddr\": \"",{"Fn::Select": ["0",{"Fn::GetAtt": ["BigipExternalInterface","SecondaryPrivateIpAddresses"]}]},"\"\n",
                                            "          },\n",
                                            "          \"partition\": \"kubernetes\",\n",
                                            "          \"balance\": \"round-robin\",\n",
                                            "          \"mode\": \"http\"\n",
                                            "        }\n",
                                            "      }\n",
                                            "    }\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/create_secret.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "kubectl create secret generic bigip-credentials --namespace kube-system --from-literal=username=",
                                            { "Ref": "adminUsername" },
                                            " --from-literal=password=",
                                            { "Ref": "adminPassword" },
                                            " --from-literal=url=",
                                            { "Fn::GetAtt": ["BigipMGMTInterface","PrimaryPrivateIpAddress"] },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/bgp_peers.yaml":{
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "apiVersion: v1\n",
                                            "kind: bgpPeer\n",
                                            "metadata:\n",
                                            "  peerIP: ",{ "Fn::GetAtt": ["BigipInternalInterface","PrimaryPrivateIpAddress"] },"\n",
                                            "  scope: global\n",
                                            "spec:\n",
                                            "  asNumber: 64511\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/privatekey.pem":{
                                "source": {"Fn::Join":["",["http://",{ "Ref": "S3BucketName" },".s3.amazonaws.com/tstanley933.pem"]]},
                                "mode": "000400",
                                "owner": "root",
                                "group": "root",
                                "authentication": "S3AccessCreds"                                
                            },
                            "/config/cloud/aws/appConfiguartion.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "set -x\n",
                                            "export PATH=\"/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin/\"\n",
                                            "while getopts i:d:x:p: option\n",
                                            "do case \"$option\" in\n",
                                            "     i) ipAddress=$OPTARG;;\n",
                                            "   esac\n",
                                            "done\n",                                            
                                            "#\n",
                                            "function pushFiles() {\n",
                                            "    scp -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /config/bgp_peers.yaml centos@${1}:~/bgp_peers.yaml\n",
                                            "    scp -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /config/create_secret.sh centos@${1}:~/create_secret.sh\n",
                                            "    scp -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /config/vs_config.yaml centos@${1}:~/vs_config.yaml\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"sudo mv ~/bgp_peers.yaml /opt/bgp_peers.yaml\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"sudo mv ~/create_secret.sh /opt/create_secret.sh\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"sudo mv ~/vs_config.yaml /opt/vs_config.yaml\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"sudo chown centos:centos /opt/bgp_peers.yaml\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"sudo chown centos:centos /opt/create_secret.sh\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"sudo chown centos:centos /opt/vs_config.yaml\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"sudo chmod +x /opt/create_secret.sh\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"/opt/create_secret.sh\"\n",
                                            "    ssh -i /config/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@${1} \"/opt/fix_bgp_peers.sh\"\n",
                                            "}\n",
                                            "#\n",
                                            "pushFiles ${ipAddress}\n",
                                            "#\n",
                                            "tmsh create sys folder /kubernetes\n",
                                            "#\n",
                                            "exit\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "001-disable-1nicautoconfig": {
                                "command": "/usr/bin/setdb provision.1nicautoconfig disable"
                            },
                            "002-install-libs": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/installCloudLibs.sh",
                                            "&>> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "003-1nic-setup": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        []
                                    ]
                                }
                            },
                            "004-create-admin-user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            " f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            " --signal ADMIN_CREATED",
                                            " --file /config/cloud/aws/createUser.sh",
                                            " --cl-args '",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "'",
                                            " --log-level debug",
                                            " -o /var/log/createUser.log",
                                            " &>> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "005-onboard-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "NAME_SERVER=`/config/getNameServer.sh eth1`;",
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js",
                                            "--wait-for ADMIN_CREATED",
                                            "--signal ONBOARD_DONE",
                                            "-o /var/log/onboard.log",
                                            "--log-level debug",
                                            "--no-reboot",
                                            "--host localhost",
                                            "--user admin",
                                            "--password",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                            "--ntp 0.us.pool.ntp.org",
                                            "--ntp 1.us.pool.ntp.org",
                                            "--tz UTC",
                                            "--dns ${NAME_SERVER}",
                                            "--module ltm:nominal",
                                            "--ping",
                                            "&>> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "006-network-config": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/network.js",
                                            "-o /var/log/networkConfig.log",
                                            "--log-level debug",
                                            "--wait-for ONBOARD_DONE",
                                            "--signal NETWORK_CONFIG_DONE",
                                            "--host localhost",
                                            "--user admin",
                                            "--password",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "--default-gw 10.10.1.1",
                                            "--vlan 'External, 1.1'",
                                            "--vlan 'Internal, 1.2'",
                                            "--self-ip 'external_self_ip, ",
                                            {
                                                "Fn::GetAtt": [
                                                    "BigipExternalInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            ", External'",
                                            "--self-ip 'internal_self_ip, ",
                                            {
                                                "Fn::GetAtt": [
                                                    "BigipInternalInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "/19, Internal'",
                                            "&>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            },
                            "007-app-config": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh ",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            " --file /config/cloud/aws/appConfiguartion.sh",
                                            " --cwd /config/cloud/aws",
                                            " --log-level debug",
                                            " --cl-args '",
                                            "-i ",
                                            { "Fn::ImportValue": {"Fn::Sub": "${assignedStackName}-ToolVMPrivateIP" }},                                            
                                            "'",
                                            " -o /var/log/appConfiguartion.log",
                                            " --wait-for NETWORK_CONFIG_DONE",
                                            " --signal APP_CONFIG_DONE",
                                            " --background",
                                            " &>> /var/log/cloudlibs-install.log &\n"
                                        ]
                                    ]
                                }
                            },
                            "008-rm-password": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        []
                                    ]
                                }
                            },
                            "009-signal-done": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            "--file /config/cloud/aws/signalDone.sh",
                                            "--cwd /config/cloud/aws",
                                            "-o /var/log/signlDone.log",
                                            "--wait-for APP_CONFIG_DONE",
                                            "--background",
                                            "&>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {"Ref": "BIGIPS3Role"},
                        "buckets": [ { "Ref": "S3BucketName" } ]
                    }
                }
            },
            "Properties": {
                "InstanceType": {
                    "Ref": "BIGIPInstanceType"
                },
                "ImageId": {
                    "Ref": "BIGIPAMI"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "BIGIPInstanceProfile"
                },
                "NetworkInterfaces": [
                    {
                        "Description": "Public or External Interface",
                        "DeviceIndex": "1",
                        "NetworkInterfaceId": {
                            "Ref": "BigipExternalInterface"
                        }
                    },
                    {
                        "Description": "Internal Interface",
                        "DeviceIndex": "2",
                        "NetworkInterfaceId": {
                            "Ref": "BigipInternalInterface"
                        }
                    },
                    {
                        "Description": "MGMT Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId": {
                            "Ref": "BigipMGMTInterface"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource BIGIPInstance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "if [[ $? -ne 0 ]]; then\n",
                                "/opt/aws/bin/cfn-signal -e $? '",
                                {
                                    "Ref": "BIGIPWaitHandle"
                                },
                                "'\n",                                            
                                "fi\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BIGIPWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "BIGIPInstance",
            "Properties": {
                "Handle": {
                    "Ref": "BIGIPWaitHandle"
                },
                "Count": "1",
                "Timeout": "1800"
            }
        },
        "BIGIPWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        }
    },
    "Outputs": {
        "BIGIPGUI": {
            "Description": "The URL to connect to the BIG-IP management GUI.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "BIGIPInstance",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        },
        "PrivateVIPIP": {
            "Description": "The private IP address that will be used to configure the VIP for the application.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {"Fn::Select": ["0",{"Fn::GetAtt": ["BigipExternalInterface","SecondaryPrivateIpAddresses"]}]}
                    ]
                ]
            }
        },
        "ExternalVIPIP": {
            "Description": "The external IP address to connect to in order to access the applicaiton from the Internet.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "BIGIPExternalVIPEip"
                        }
                    ]
                ]
            }
        }
    }
}
