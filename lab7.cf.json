{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a full deployment of a VPC and all supporting infrastructure as well as a single server of Microsoft Windows Server 2012 R2, and then finally configures IIS.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Basics"
                    },
                    "Parameters": [
                        "WindowsName",
                        "BIGIPName",
                        "KeyName",
                        "adminUsername",
                        "adminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Size"
                    },
                    "Parameters": [
                        "WindowsInstanceType",
                        "BIGIPInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Settings"
                    },
                    "Parameters": [
                        "WindowsAMI",
                        "BIGIPAMI"
                    ]
                }
            ],
            "ParameterLabels": {}
        }
    },
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        },
        "adminUsername": {
            "Type": "String",
            "Description": "An admin username for loging into the Windows Server and BIG-IP.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "adminPassword": {
            "Type": "String",
            "NoEcho": "true",
            "Description": "A password that will be used to login to the Windows Server and BIG-IP.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "WindowsName": {
            "Description": "The name of the Windows Server.",
            "Type": "String"
        },
        "BIGIPName": {
            "Description": "The name of the BIG-IP.",
            "Type": "String"
        },
        "WindowsInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "Choose one of the ."
        },
        "WindowsAMI": {
            "Description": "Windows Version and Region AMI",
            "Type": "String",
            "Default": "ami-bdb618dd",
            "AllowedValues": [
                "ami-bdb618dd",
                "ami-fc97a7eb"
            ]
        },
        "BIGIPInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m3.xlarge",
            "AllowedValues": [
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "Choose one of these."
        },
        "BIGIPAMI": {
            "Description": "F5 BIG-IP AMI to install from.",
            "Type": "String",
            "Default": "ami-8633efe6",
            "AllowedValues": [
                "ami-8633efe6",
                "ami-0b7a011c"
            ]
        }
    },
    "Resources": {
        "StackVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": "10.10.0.0/16",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "VPC-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "StackSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "CidrBlock": "10.10.20.0/24",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Subnet-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "StackInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "InternetGateway-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "InternetGatewayId": {
                    "Ref": "StackInternetGateway"
                }
            }
        },
        "ExternalRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "ExternalRouteTable-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ExternalRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "ExternalRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "StackInternetGateway"
                }
            }
        },
        "ExternalSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "StackSubnet"
                },
                "RouteTableId": {
                    "Ref": "ExternalRouteTable"
                }
            }
        },
        "BIGIPSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and RDP",
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8443",
                        "ToPort": "8443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WindowsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and RDP",
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "BIGIPInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "001-disable-1nicautoconfig": {
                              "command": "/usr/bin/setdb provision.1nicautoconfig disable"
                            },
                            "002-install-libs": {
                              "command": "nohup /config/installCloudLibs.sh &> /var/log/cloudlibs-install.log < /dev/null &"
                            },
                            "003-1nic-setup": {
                              "command": {
                                "Fn::Join": [
                                  " ",
                                  [
                                    "nohup /config/waitThenRun.sh",
                                    "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                    "--file /config/cloud/aws/f5-cloud-libs/scripts/aws/1nicSetup.sh",
                                    "--cwd /config/cloud/aws/f5-cloud-libs/scripts/aws",
                                    "-o /var/log/1nicSetup.log",
                                    "--background",
                                    "--signal 1_NIC_SETUP_DONE",
                                    "&> /var/log/cloudlibs-install.log < /dev/null",
                                    "&"
                                  ]
                                ]
                              }
                            },
                            "004-create-admin-user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            " f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            " --wait-for 1_NIC_SETUP_DONE",
                                            " --signal ADMIN_CREATED",
                                            " --file /config/cloud/aws/createUser.sh",
                                            " --cl-args '",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "'",
                                            " --log-level verbose",
                                            " -o /var/log/createUser.log",
                                            " --background",
                                            " &> /var/log/cloudlibs-install.log < /dev/null",
                                            " &"
                                        ]
                                    ]
                                }
                            },
                            "005-onboard-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/onboard.js",
                                            "--ssl-port '8443'",
                                            "--wait-for ADMIN_CREATED",
                                            "--log-level verbose",
                                            "-o  /var/log/onboard.log",
                                            "--background",
                                            "--no-reboot",
                                            "--host localhost",
                                            "--user",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "--password",
                                            {
                                                "Ref" : "adminPassword"
                                            },
                                            "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                            "--ntp 0.us.pool.ntp.org",
                                            "--ntp 1.us.pool.ntp.org",
                                            "--tz UTC",
                                            "--dns ${NAME_SERVER}",
                                            "--module ltm:nominal",
                                            "&> /var/log/cloudlibs-install.log < /dev/null",
                                            "&"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/config/waitThenRun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "while true; do echo waiting for cloud libs install to complete",
                                            "    if [ -f /config/cloud/cloudLibsReady ]; then",
                                            "        echo cloud libs installed",
                                            "        break",
                                            "    else",
                                            "        sleep 10",
                                            "    fi",
                                            "done",
                                            "\"$@\""
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/verifyHash": {
                              "content": {
                                "Fn::Join": [
                                  "\n",
                                  [
                                    "cli script /Common/verifyHash {",
                                    "    proc script::run {} {",
                                    "        if {[catch {",
                                    "            set file_path [lindex $tmsh::argv 1]",
                                    "            set expected_hash 1059c36ee97d8912d5cfe1837e19b2088c3f477424c69bc733cac3dba285ac1c664bfb6fea692dc6916747470f1f3ff3c2ba1bf7d7342d8ff4250f240425418a",
                                    "            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
                                    "            if { $expected_hash eq $computed_hash } {",
                                    "                exit 0",
                                    "            }",
                                    "            tmsh::log err {Hash does not match}",
                                    "            exit 1",
                                    "        }]} {",
                                    "            tmsh::log err {Unexpected error in verifyHash}",
                                    "            exit 1",
                                    "        }",
                                    "    }",
                                    "    script-signature mug5u4TOC+wptaobEMWKRtEYM6/c9KKwFMEG/7mfAE3UWqj1X1uNj9/3RgEvV5eKled4NvuDaxj8RjW2CffKuJJPMcRcbFJ/fMzlgm/ZqSWc++5WTGHLUBFuXJeJARVjCBRjrddOyCCBQbP9XEynewXkb1cOEn9jkawXSppbo4UG204wcE8VMWOggxy5un56ioM9vcFvWAiPH4Ur6T86Vsx859u0fpJRY2Ovm2sXcguXMZMds0sJZMuWJyIb84gcIRIAqMjqx+UQwGbeZTbsWbDvtrMD3m/cMs8IOc1CJvjI6ra6iApeyZJECzgTH6kPru74l7hxEk0rU4UfAcc3Fg==",
                                    "}"
                                  ]
                                ]
                              },
                              "mode": "000755",
                              "owner": "root",
                              "group": "root"
                            },
                            "/config/installCloudLibs.sh": {
                              "content": {
                                "Fn::Join": [
                                  "\n",
                                  [
                                    "#!/bin/bash",
                                    "echo about to execute",
                                    "echo expanding f5-cloud-libs.tar.gz",
                                    "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/",
                                    "echo cloud libs install complete",
                                    "touch /config/cloud/cloudLibsReady"
                                  ]
                                ]
                              },
                              "mode": "000755",
                              "owner": "root",
                              "group": "root"
                            },
                            "/config/cloud/aws/getNameServer.sh": {
                              "content": {
                                "Fn::Join": [
                                  "\n",
                                  [
                                    "INTERFACE=$1",
                                    "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                    "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                    "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                                    "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                                    "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                                    "echo $NAME_SERVER"
                                  ]
                                ]
                              },
                              "mode": "000755",
                              "owner": "root",
                              "group": "root"
                            },
                            "/config/cloud/aws/createUser.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword\n",
                                            "PASSWORD=",
                                            {
                                                "Ref" : "adminPassword"
                                            },
                                            "\n",
                                            "if [ \"$1\" = admin ]; then\n",
                                            "    tmsh modify auth user \"$1\" password ${PASSWORD}\n",
                                            "else\n",
                                            "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }\n",
                                            "fi\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/aws/firstrun.utils": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "http://cdn.f5.com/product/templates/utils/firstrun.utils"
                            },
                            "/config/cloud/f5-cloud-libs.tar.gz": {
                              "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v2.0.1/dist/f5-cloud-libs.tar.gz",
                              "mode": "000644",
                              "owner": "root",
                              "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": { "Ref": "BIGIPInstanceType" },
                "ImageId": { "Ref": "BIGIPAMI" },
                "KeyName": { "Ref": "KeyName" },
                "SubnetId": { "Ref": "StackSubnet" },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [ "BIGIPSecurityGroup", "GroupId" ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v ",
                                "       --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "       --resource BIGIPInstance",                                
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource BIGIPInstance ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT1H"
                }
            }
        },
        "WindowsInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "IIS_Install": [
                            "install_IIS"
                        ]
                    },
                    "install_IIS": {
                        "files": {
                            "C:\\Users\\Administrator\\Downloads\\firstrun.ps1": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo \"Installing web-webserver\"\n",
                                            "add-windowsfeature web-webserver -includeallsubfeature -logpath $env:temp\\webserver_addrole.log\n",
                                            "echo \"Installing web-mgmt-tools\"\n",
                                            "add-windowsfeature web-mgmt-tools -includeallsubfeature -logpath $env:temp\\mgmttools_addrole.log\n",
                                            "echo \"This is the first Windows IIS Server ",
                                            {
                                                "Ref": "WindowsName"
                                            },
                                            "\" >> C:\\inetpub\\wwwroot\\index.html\n",
                                            "$pass = ConvertTo-SecureString \"",
                                            {
                                                "Ref" : "adminPassword"
                                            },
                                            "\" -AsPlainText -Force\n",
                                            "New-LocalUser -Name \"tstanley\" -Password $pass -PasswordNeverExpires\n",
                                            "Add-LocalGroupMember -Group \"Administrators\" -Member \"",
                                            {
                                                "Ref" : "adminUsername"
                                            },
                                            "\"\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "b-configure": {
                                "command": "powershell.exe -ExecutionPolicy unrestricted C:\\Users\\Administrator\\Downloads\\firstrun.ps1"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": {
                    "Ref": "WindowsInstanceType"
                },
                "ImageId": {
                    "Ref": "WindowsAMI"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SubnetId": {
                    "Ref": "StackSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "WindowsSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v ",
                                "       --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "       --resource WindowsInstance",
                                "       --configsets IIS_Install ",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "       --stack ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "       --resource WindowsInstance",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT30M"
                }
            }
        }
    },
    "Outputs": {
        "ServerURL": {
            "Description": "The AWS Generated URL.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "WindowsInstance",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        },
        "BIGIPURL": {
            "Description": "The BIG-IP MGMT URL.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "BIGIPInstance",
                                "PublicDnsName"
                            ]
                        },
                        ":8443/"
                    ]
                ]
            }
        }
    }
}