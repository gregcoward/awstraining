{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a full deployment of a VPC and all supporting infrastructure as well as a single 3 NIC BIG-IP, CentOS 7 server as a KOPS tool-VM then builds a 3 node Kubernetes Cluster.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Basics"
                    },
                    "Parameters": [
                        "KeyName",
                        "adminUsername",
                        "adminPassword",
                        "accessKey",
                        "secretKey",
                        "KopsInstanceName",
                        "BIGIPName",
                        "K8ClusterName"
                    ]
                },
                {
                    "Label": {
                        "default": "Size"
                    },
                    "Parameters": [
                        "KopsInstanceType",
                        "BIGIPInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Settings"
                    },
                    "Parameters": [
                        "KopsInstanceAMI",
                        "BIGIPAMI"
                    ]
                }
            ],
            "ParameterLabels": {}
        }
    },
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        },
        "K8ClusterName": {
            "Description": "The name of the BIG-IP.",
            "Type": "String"
        },
        "KopsInstanceName": {
            "Description": "The name of the application connector.",
            "Type": "String",
            "Default": "KopsInstance"
        },
        "adminUsername": {
            "Type": "String",
            "Description": "An admin username for loging into the application connector.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "adminPassword": {
            "Type": "String",
            "NoEcho": "true",
            "Description": "A password that will be used to login into the applicaiton connector.",
            "MaxLength": "255",
            "MinLength": "1"
        },
        "accessKey": {
            "Type": "String",
            "Description": "Access Key required to create the cluster.",
            "NoEcho": "true"
        },
        "secretKey": {
            "Type": "String",
            "Description": "Secret Key also required to create the cluster.",
            "NoEcho": "true"
        },
        "KopsInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.medium",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m3.medium"
            ],
            "ConstraintDescription": "Choose one of the following."
        },
        "KopsInstanceAMI": {
            "Description": "Ubuntu Version and Region AMI",
            "Type": "String",
            "Default": "ami-d2c924b2",
            "AllowedValues": [
                "ami-d2c924b2",
                "ami-6d1c2007",
                "ami-6a2d760f"
            ]
        },
        "BIGIPName": {
            "Description": "The name of the BIG-IP.",
            "Type": "String"
        },
        "BIGIPInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m4.xlarge",
            "AllowedValues": [
                "m4.xlarge"
            ],
            "ConstraintDescription": "Choose one of these."
        },
        "BIGIPAMI": {
            "Description": "F5 BIG-IP AMI to install from.",
            "Type": "String",
            "Default": "ami-8633efe6",
            "AllowedValues": [
                "ami-8633efe6",
                "ami-0b7a011c",
                "ami-25002540"
            ]
        }
    },
    "Resources": {
        "StackVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": "10.10.0.0/16",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "VPC-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "mgmtSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "AvailabilityZone": {"Fn::Join": ["",[{"Ref": "AWS::Region"},"a"]]},
                "CidrBlock": "10.10.5.0/24",
                "MapPublicIpOnLaunch": true,                
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "mgmtSubnet"
                    }
                ]
            }
        },
        "externalSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "AvailabilityZone": {"Fn::Join": ["",[{"Ref": "AWS::Region"},"a"]]},
                "CidrBlock": "10.10.10.0/24",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "externalSubnet"
                    }
                ]
            }
        },
        "internalSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "AvailabilityZone": {"Fn::Join": ["",[{"Ref": "AWS::Region"},"a"]]},
                "CidrBlock": "10.10.20.0/24",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "internalSubnet"
                    }
                ]
            }
        },
        "StackInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "InternetGateway-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "InternetGatewayId": {
                    "Ref": "StackInternetGateway"
                }
            }
        },
        "ServerNATGatewayEIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {}
        },
        "ServerNATGateway": {
            "DependsOn": "internalSubnetRouteTableAssociation",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ServerNATGatewayEIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "externalSubnet"
                }
            }
        },
        "MgmtRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "MgmtRouteTable-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "MgmtRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "MgmtRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "StackInternetGateway"
                }
            }
        },
        "MgmtSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "mgmtSubnet"
                },
                "RouteTableId": {
                    "Ref": "MgmtRouteTable"
                }
            }
        },
        "ExternalRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "ExternalRouteTable-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ExternalRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "ExternalRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "StackInternetGateway"
                }
            }
        },
        "ExternalSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "externalSubnet"
                },
                "RouteTableId": {
                    "Ref": "ExternalRouteTable"
                }
            }
        },
        "internalRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "internalRouteTable-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ServerRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "internalRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "ServerNATGateway"
                }
            }
        },
        "internalSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "internalSubnet"
                },
                "RouteTableId": {
                    "Ref": "internalRouteTable"
                }
            }
        },
        "s3Bucket": {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "AccessControl" : "PublicReadWrite"
            }
        },
        "BIGIPSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and RDP",
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8443",
                        "ToPort": "8443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "10.10.0.0/16"
                    }
                ]
            }
        },
        "BIGIPMgmtEip": {
            "Type": "AWS::EC2::EIP"
        },
        "BIGIPMgmtEipAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "BIGIPMgmtEip",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "BigipMGMTInterface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "BigipMGMTInterface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            }
        },
        "BIGIPExternalEip": {
            "Type": "AWS::EC2::EIP"
        },
        "BIGIPExternalEipAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "BIGIPExternalEip",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "BigipExternalInterface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "BigipExternalInterface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            }
        },
        "BIGIPExternalVIPEip": {
            "Type": "AWS::EC2::EIP"
        },
        "BIGIPExternalVIPEipAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "BIGIPExternalVIPEip",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "BigipExternalInterface"
                },
                "PrivateIpAddress": {
                    "Fn::Select": ["0",{"Fn::GetAtt": ["BigipExternalInterface","SecondaryPrivateIpAddresses"]}]
                }
            }
        },
        "BigipExternalInterface": {
            "Properties": {
                "Description": "Public External Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "BIGIPSecurityGroup"
                    }
                ],
                "SecondaryPrivateIpAddressCount": "1",
                "SubnetId": {
                    "Ref": "externalSubnet"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "BigipInternalInterface": {
            "DependsOn" : [ "KopsInstanceSecurityGroup" ],
            "Properties": {
                "Description": "Internal Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "KopsInstanceSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "internalSubnet"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "BigipMGMTInterface": {
            "Properties": {
                "Description": "MGMT Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "BIGIPSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "mgmtSubnet"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "BIGIPInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/config/cloud/aws/createUser.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "#f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword\n",
                                            "#PASSWORD=$(/bin/sed -e $'s:[\\'\"%{};/|#\\x20\\\\\\\\]:\\\\\\\\&:g' < /config/cloud/aws/.adminPassword)\n",
                                            "PASSWORD=",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "\n",
                                            "if [ \"$1\" = admin ]; then\n",
                                            "    tmsh modify auth user \"$1\" password ${PASSWORD}\n",
                                            "else\n",
                                            "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }\n",
                                            "fi\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/rm-password.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "date\n",
                                            "echo 'starting rm-password.sh'\n",
                                            "rm /config/cloud/aws/.adminPassword\n",
                                            "date\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/f5-cloud-libs-aws.tar.gz": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v1.0.1/dist/f5-cloud-libs-aws.tar.gz"
                            },
                            "/config/cloud/f5-cloud-libs.tar.gz": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v2.1.0/dist/f5-cloud-libs.tar.gz"
                            },
                            "/config/getNameServer.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "INTERFACE=$1",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                                            "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                                            "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                                            "echo $NAME_SERVER"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/installCloudLibs.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "echo about to execute",
                                            "checks=0",
                                            "while [ $checks -lt 120 ]; do echo checking mcpd",
                                            "    tmsh -a show sys mcp-state field-fmt | grep -q running",
                                            "    if [ $? == 0 ]; then",
                                            "        echo mcpd ready",
                                            "        break",
                                            "    fi",
                                            "    echo mcpd not ready yet",
                                            "    let checks=checks+1",
                                            "    sleep 10",
                                            "done",
                                            "echo loading verifyHash script",
                                            "if ! tmsh load sys config merge file /config/verifyHash; then",
                                            "    echo cannot validate signature of /config/verifyHash",
                                            "    exit",
                                            "fi",
                                            "echo loaded verifyHash",
                                            "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
                                            "for fileToVerify in \"${filesToVerify[@]}\"",
                                            "do",
                                            "    echo verifying \"$fileToVerify\"",
                                            "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
                                            "        echo \"$fileToVerify\" is not valid",
                                            "        exit 1",
                                            "    fi",
                                            "    echo verified \"$fileToVerify\"",
                                            "done",
                                            "mkdir -p /config/cloud/aws/node_modules",
                                            "echo expanding f5-cloud-libs.tar.gz",
                                            "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules",
                                            "touch /config/cloud/cloudLibsReady"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/verifyHash": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "cli script /Common/verifyHash {",
                                            "    proc script::run {} {",
                                            "        if {[catch {",
                                            "            set hashes(f5-cloud-libs.tar.gz) a6a9db3b89bbd014413706f22fa619c3717fac41fc99ffe875589c90e9b85a05cea227c134ea6e5b519c8fee0d12f2175368e75917f31f447ece3d92f31814af",
                                            "            set hashes(f5-cloud-libs-aws.tar.gz) 22b554337b27802b7794206462bb98d346a7241622c11bcf9e834a06bcd1bd1b5b99efee512ac6eebe64e9d34f3024bcb569371fd4ee79006761bc5e5a74a59c",
                                            "            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0",
                                            "            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034",
                                            "            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe",
                                            "",
                                            "            set file_path [lindex $tmsh::argv 1]",
                                            "            set file_name [file tail $file_path]",
                                            "",
                                            "            if {![info exists hashes($file_name)]} {",
                                            "                tmsh::log err \"No hash found for $file_name\"",
                                            "                exit 1",
                                            "            }",
                                            "",
                                            "            set expected_hash $hashes($file_name)",
                                            "            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
                                            "            if { $expected_hash eq $computed_hash } {",
                                            "                exit 0",
                                            "            }",
                                            "            tmsh::log err \"Hash does not match for $file_path\"",
                                            "            exit 1",
                                            "        }]} {",
                                            "            tmsh::log err {Unexpected error in verifyHash}",
                                            "            exit 1",
                                            "        }",
                                            "    }",
                                            "    script-signature QmpupbE2kzw2T7LO/Hp6NtscwZnEXjq8U0xOQLOfFIid1pdvsis6HOphdKyXjY+uzFnHktSy/Xe2LdwxjKmKRaMy5ZuE8NR+MJyUGLR3OwgVj1sGVZgwDCWvkBLyNKDQFkFfuTBk6TTN7q58+dJ3qulOv7KWkpKq/m8+8VXyQ4pj+96bHWwrs8kYRtHX5wc7cSJE/3thNWCF8v9BAyFFUFEyy6z7mFhH8iD2i+OEnqpK+0VAY1irspmaCigo3NmJXfZXIo2cWIopORqWsCATsVT6lunpV6z7h2FipnMJpAhVWqlzezSAOCHI0juPeGDAHIyNX8uLlTOpWJSgP1d4YQ==",
                                            "}",
                                            ""
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/waitThenRun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "while true; do echo \"waiting for cloud libs install to complete\"",
                                            "    if [ -f /config/cloud/cloudLibsReady ]; then",
                                            "        break",
                                            "    else",
                                            "        sleep 10",
                                            "    fi",
                                            "done",
                                            "\"$@\""
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/signalDone.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-signal -e $? '",
                                            {
                                                "Ref": "BIGIPWaitHandle"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/config/cloud/aws/appConfiguartion.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "set -x\n",
                                            "export PATH=\"/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin/\"\n",
                                            "while getopts i:d:x:p: option\n",
                                            "do case \"$option\" in\n",
                                            "     i) ipAddress=$OPTARG;;\n",
                                            "     d) domainFqdn=$OPTARG;;\n",
                                            "     x) passwd=$OPTARG;;\n",
                                            "     p) pipAddress=$OPTARG;;\n",
                                            "   esac\n",
                                            "done\n",
                                            "user=\"admin\"\n",
                                            "#\n",
                                            "#\n",
                                            "#\n",
                                            "pool_response_code=$(curl -sku ${user}:${passwd} -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost/mgmt/tm/ltm/pool -d '{\"name\":\"kops_ssh_pool\",\"description\":\"kops_ssh_pool\",\"monitor\":\"/Common/tcp\",\"members\":[{\"name\":\"'\"$ipAddress\"':22\",\"address\":\"'\"$ipAddress\"'\"}]}' -o /dev/null)\n",
                                            "#\n",
                                            "#\n",
                                            "if [[ ${pool_response_code} != 200 ]]; then\n",
                                            "    echo \"Failed to create the kops_ssh_pool; exiting with response code ${pool_response_code}\"\n",
                                            "    exit ${pool_response_code}\n",
                                            "else\n",
                                            "    echo \"KOPS SSH Pool creation complete.\"\n",
                                            "fi\n",
                                            "#\n",
                                            "#\n",
                                            "vip_response_code=$(curl -sku ${user}:${passwd} -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost/mgmt/tm/ltm/virtual -d '{\"name\":\"kops_ssh_vip\",\"destination\":\"/Common/'\"$pipAddress\"':22\",\"enabled\":true,\"ipProtocol\":\"tcp\",\"mask\":\"255.255.255.255\",\"pool\":\"/Common/kops_ssh_pool\",\"source\":\"0.0.0.0/0\",\"sourceAddressTranslation\":{\"type\":\"automap\"},\"translateAddress\":\"enabled\",\"translatePort\":\"enabled\",\"vlansDisabled\":true,\"vsIndex\":3,\"profiles\":[{\"name\":\"tcp\"}]}' -o /dev/null)\n",
                                            "#\n",
                                            "#\n",
                                            "if [[ ${vip_response_code} != 200 ]]; then\n",
                                            "    echo \"Failed to create KOPS SSH VIP; exiting with response code ${vip_response_code}\"\n",
                                            "    exit ${vip_response_code}\n",
                                            "else\n",
                                            "    echo \"KOPS SSH VIP creation complete.\"\n",
                                            "fi\n",
                                            "#\n",
                                            "tmsh create sys folder /kubernetes\n",
                                            "#\n",
                                            "tmsh create net route 10.10.32.0/19 gw 10.10.20.1\n",
                                            "exit\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "001-disable-1nicautoconfig": {
                                "command": "/usr/bin/setdb provision.1nicautoconfig disable"
                            },
                            "002-install-libs": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/installCloudLibs.sh",
                                            "&>> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "003-1nic-setup": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        []
                                    ]
                                }
                            },
                            "004-create-admin-user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            " f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            " --signal ADMIN_CREATED",
                                            " --file /config/cloud/aws/createUser.sh",
                                            " --cl-args '",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "'",
                                            " --log-level debug",
                                            " -o /var/log/createUser.log",
                                            " &>> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "005-onboard-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "NAME_SERVER=`/config/getNameServer.sh eth1`;",
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js",
                                            "--wait-for ADMIN_CREATED",
                                            "--signal ONBOARD_DONE",
                                            "-o /var/log/onboard.log",
                                            "--log-level debug",
                                            "--no-reboot",
                                            "--host localhost",
                                            "--user admin",
                                            "--password",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                            "--ntp 0.us.pool.ntp.org",
                                            "--ntp 1.us.pool.ntp.org",
                                            "--tz UTC",
                                            "--dns ${NAME_SERVER}",
                                            "--module ltm:nominal",
                                            "--ping",
                                            "&>> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "006-network-config": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/network.js",
                                            "-o /var/log/networkConfig.log",
                                            "--log-level debug",
                                            "--wait-for ONBOARD_DONE",
                                            "--signal NETWORK_CONFIG_DONE",
                                            "--host localhost",
                                            "--user admin",
                                            "--password",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "--default-gw 10.10.10.1",
                                            "--vlan 'External, 1.1'",
                                            "--vlan 'Internal, 1.2'",
                                            "--self-ip 'external_self_ip, ",
                                            {
                                                "Fn::GetAtt": [
                                                    "BigipExternalInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            ", External'",
                                            "--self-ip 'internal_self_ip, ",
                                            {
                                                "Fn::GetAtt": [
                                                    "BigipInternalInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            ", Internal'",
                                            "&>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            },
                            "007-app-config": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh ",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            " --file /config/cloud/aws/appConfiguartion.sh",
                                            " --cwd /config/cloud/aws",
                                            " --log-level debug",
                                            " --cl-args '",
                                            "-i ",
                                            { "Fn::GetAtt": [ "KopsInstance","PrivateIp" ] },
                                            " -d myWebapp.example.com",
                                            " -x ",
                                            { "Ref": "adminPassword" },
                                            " -p ",
                                            { "Fn::GetAtt": ["BigipExternalInterface","PrimaryPrivateIpAddress"] },
                                            "'",
                                            " -o /var/log/appConfiguartion.log",
                                            " --wait-for NETWORK_CONFIG_DONE",
                                            " --signal APP_CONFIG_DONE",
                                            " --background",
                                            " &>> /var/log/cloudlibs-install.log &\n"
                                        ]
                                    ]
                                }
                            },
                            "008-rm-password": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        []
                                    ]
                                }
                            },
                            "009-signal-done": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                            "--file /config/cloud/aws/signalDone.sh",
                                            "--cwd /config/cloud/aws",
                                            "-o /var/log/signlDone.log",
                                            "--wait-for APP_CONFIG_DONE",
                                            "--background",
                                            "&>> /var/log/cloudlibs-install.log &"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": {
                    "Ref": "BIGIPInstanceType"
                },
                "ImageId": {
                    "Ref": "BIGIPAMI"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "Description": "Public or External Interface",
                        "DeviceIndex": "1",
                        "NetworkInterfaceId": {
                            "Ref": "BigipExternalInterface"
                        }
                    },
                    {
                        "Description": "Internal Interface",
                        "DeviceIndex": "2",
                        "NetworkInterfaceId": {
                            "Ref": "BigipInternalInterface"
                        }
                    },
                    {
                        "Description": "MGMT Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId": {
                            "Ref": "BigipMGMTInterface"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource BIGIPInstance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "if [[ $? -ne 0 ]]; then\n",
                                "/opt/aws/bin/cfn-signal -e $? '",
                                {
                                    "Ref": "BIGIPWaitHandle"
                                },
                                "'\n",                                            
                                "fi\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BIGIPWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "BIGIPInstance",
            "Properties": {
                "Handle": {
                    "Ref": "BIGIPWaitHandle"
                },
                "Count": "1",
                "Timeout": "1800"
            }
        },
        "BIGIPWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "KopsInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable connectivity from the other subnets",
                "VpcId": {
                    "Ref": "StackVPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "10.10.0.0/16"
                    }
                ]
            }
        },
        "KopsInstance": {
            "DependsOn": "ServerNATGateway",
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/opt/signalDone.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "/opt/aws/bin/cfn-signal -e $? '",
                                            {
                                                "Ref": "KopsInstanceWaitHandle"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/signalFailure.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "/opt/aws/bin/cfn-signal --success false '",
                                            {
                                                "Ref": "KopsInstanceWaitHandle"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/root/.aws/credentials":{
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "aws_access_key_id = ",
                                            { "Ref": "accessKey" },
                                            "\n",
                                            "aws_secret_access_key = ",
                                            { "Ref": "secretKey" },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/root/.aws/config":{
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[default]\n",
                                            "output = json\n",
                                            "region = ",
                                            { "Ref": "AWS::Region" },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/home/centos/privatekey.pem":{
                                "source": "https://s3.amazonaws.com/tafyf/emeatraining.pem",
                                "mode": "000400",
                                "owner": "centos",
                                "group": "centos",
                                "authentication": "S3AccessCreds"
                            },
                            "/opt/k8s-bigip-ctlr-master-26326.tar.gz":{
                                "source": "https://s3.amazonaws.com/tafyf/k8s-bigip-ctlr-master-26326.tar.gz",
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos",
                                "authentication": "S3AccessCreds"
                            },
                            "/opt/calicoctl":{
                                "source": "https://raw.githubusercontent.com/gregcoward/awstraining/master/calicoctl",
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },                                                     
                            "/opt/vs-config.yaml":{
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "kind: ConfigMap\n",
                                            "apiVersion: v1\n",
                                            "metadata:\n",
                                            "  name: example-vs\n",
                                            "  namespace: default\n",
                                            "  labels:\n",
                                            "    f5type: virtual-server\n",
                                            "data:\n",
                                            "  schema: \"f5schemadb://bigip-virtual-server_v0.1.2.json\"\n",
                                            "  data: |\n",
                                            "    {\n",
                                            "      \"virtualServer\": {\n",
                                            "        \"backend\": {\n",
                                            "          \"servicePort\": 80,\n",
                                            "          \"serviceName\": \"my-nginx\",\n",
                                            "          \"healthMonitors\": [{\n",
                                            "            \"interval\": 30,\n",
                                            "            \"protocol\": \"http\",\n",
                                            "            \"send\": \"GET /\\\\r\\\\n\",\n",
                                            "            \"timeout\": 86400\n",
                                            "          }]\n",
                                            "        },\n",
                                            "        \"frontend\": {\n",
                                            "          \"virtualAddress\": {\n",
                                            "            \"port\": 80,\n",
                                            "            \"bindAddr\": \"",{"Fn::Select": ["0",{"Fn::GetAtt": ["BigipExternalInterface","SecondaryPrivateIpAddresses"]}]},"\"\n",
                                            "          },\n",
                                            "          \"partition\": \"kubernetes\",\n",
                                            "          \"balance\": \"round-robin\",\n",
                                            "          \"mode\": \"http\"\n",
                                            "        }\n",
                                            "      }\n",
                                            "    }\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/create_configmap.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "kubectl create -f /opt/vs-config.yaml",                                            
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },   
                            "/opt/expose_service.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "#Expose the port the NGINX servers will listen on.\n",
                                            "kubectl expose deployment my-nginx --port=80 --type=NodePort\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },                                                  
                            "/opt/create_cluster.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "export PATH=~/.local/bin:$PATH\n",
                                            "export PATH=/usr/local/bin:$PATH\n",
                                            "export PATH=~/.local/bin:$PATH\n",
                                            "export AWS_ACCESS_KEY_ID=",
                                            { "Ref": "accessKey" },
                                            "\n",
                                            "export AWS_SECRET_ACCESS_KEY=",
                                            { "Ref": "secretKey" },
                                            "\n",
                                            "export CLUSTER_NAME=",
                                            { "Ref": "K8ClusterName" },
                                            ".route53.eisconsult.net\n",
                                            "export KOPS_STATE_STORE=s3://",
                                            { "Ref": "s3Bucket" },
                                            "\n",
                                            "export VPC_ID=",
                                            { "Ref": "StackVPC"},
                                            "\n",
                                            "export NETWORK_CIDR=",
                                            { "Fn::GetAtt": ["StackVPC","CidrBlock"] },
                                            "\n",
                                            "export SUBNET_ID=",
                                            { "Ref": "internalSubnet" },
                                            "\n",
                                            "#kops update cluster --name=${CLUSTER_NAME}\n",
                                            "kops create cluster --zones=",
                                            {"Fn::Join": ["",[{"Ref": "AWS::Region"},"a"]]},
                                            " --name=${CLUSTER_NAME} --vpc=${VPC_ID} --network-cidr=${NETWORK_CIDR} --ssh-public-key=/opt/id_rsa.pub\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/delete_cluster.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "export PATH=~/.local/bin:$PATH\n",
                                            "export PATH=/usr/local/bin:$PATH\n",
                                            "export PATH=~/.local/bin:$PATH\n",
                                            "export AWS_ACCESS_KEY_ID=",
                                            { "Ref": "accessKey" },
                                            "\n",
                                            "export AWS_SECRET_ACCESS_KEY=",
                                            { "Ref": "secretKey" },
                                            "\n",
                                            "export CLUSTER_NAME=",
                                            { "Ref": "K8ClusterName" },
                                            ".route53.eisconsult.net\n",
                                            "export KOPS_STATE_STORE=s3://",
                                            { "Ref": "s3Bucket" },
                                            "\n",
                                            "export VPC_ID=",
                                            { "Ref": "StackVPC"},
                                            "\n",
                                            "export NETWORK_CIDR=",
                                            { "Fn::GetAtt": ["StackVPC","CidrBlock"] },
                                            "\n",
                                            "export SUBNET_ID=",
                                            { "Ref": "internalSubnet" },
                                            "\n",
                                            "kops delete cluster --name=${CLUSTER_NAME} --yes\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },                        
                            "/opt/update_cluster.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "export PATH=~/.local/bin:$PATH\n",
                                            "export PATH=/usr/local/bin:$PATH\n",
                                            "export PATH=~/.local/bin:$PATH\n",
                                            "export AWS_ACCESS_KEY_ID=",
                                            { "Ref": "accessKey" },
                                            "\n",
                                            "export AWS_SECRET_ACCESS_KEY=",
                                            { "Ref": "secretKey" },
                                            "\n",
                                            "export CLUSTER_NAME=",
                                            { "Ref": "K8ClusterName" },
                                            ".route53.eisconsult.net\n",
                                            "export KOPS_STATE_STORE=s3://",
                                            { "Ref": "s3Bucket" },
                                            "\n",
                                            "export VPC_ID=",
                                            { "Ref": "StackVPC"},
                                            "\n",
                                            "export NETWORK_CIDR=",
                                            { "Fn::GetAtt": ["StackVPC","CidrBlock"] },
                                            "\n",
                                            "export SUBNET_ID=",
                                            { "Ref": "internalSubnet" },
                                            "\n",
                                            "kops update cluster --name=${CLUSTER_NAME} --yes\n"                                            
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/create_secret.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "kubectl create secret generic bigip-credentials --namespace kube-system --from-literal=username=",
                                            { "Ref": "adminUsername" },
                                            " --from-literal=password=",
                                            { "Ref": "adminPassword" },
                                            " --from-literal=url=",
                                            { "Fn::GetAtt": ["BigipMGMTInterface","PrimaryPrivateIpAddress"] },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/cc_stage.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -x\n",
                                            "function pushFiles() {\n",
                                            "    scp -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /opt/k8s-bigip-ctlr-master-26326.tar.gz admin@${1}:~/k8s-bigip-ctlr-master-26326.tar.gz\n",
                                            "    scp -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /opt/calicoctl admin@${1}:~/calicoctl\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"sudo docker load -i ~/k8s-bigip-ctlr-master-26326.tar.gz\"\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"sudo docker run -d -p 5000:5000 --restart=always --name registry registry:2\"\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"sudo docker images\"\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"sudo docker tag 93d8e97443f8 localhost:5000/cc\"\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"sudo docker push localhost:5000/cc\"\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"chmod +x ~/calicoctl\"\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"sudo mv ~/calicoctl /usr/bin\"\n",
                                            "}\n",
                                            "# Get Master IP address\n",
                                            "masterIP=$( kubectl get ep | awk '/^kubernetes / { print $2 }' | cut -d: -f1 )\n",
                                            "# Find Node IP addresses\n",
                                            "kubectl get nodes | grep internal | cut -d\" \" -f1 | while read line\n",
                                            "do\n",
                                            "ipAddress=$(nslookup $line | awk '/^Address: / { print $2 }')\n",
                                            "if [[ ${ipAddress} == ${masterIP} ]]; then\n",
                                            "        echo \"Do nothing.\"\n",
                                            "else\n",
                                            "        echo ${ipAddress} >> /tmp/nodes\n",
                                            "fi\n",
                                            "done\n",
                                            "#\n",
                                            "exec 3</tmp/nodes\n",
                                            "while IFS='' read -r -u 3 line || [[ -n \"$line\" ]]\n",
                                            "do\n",
                                            "pushFiles ${line}\n",
                                            "done\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/bgp_peers.yaml":{
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "apiVersion: v1\n",
                                            "kind: bgpPeer\n",
                                            "metadata:\n",
                                            "  peerIP: ",{ "Fn::GetAtt": ["BigipInternalInterface","PrimaryPrivateIpAddress"] },"\n",
                                            "  scope: global\n",
                                            "spec:\n",
                                            "  asNumber: 64511\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/fix_bgp_peers.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "#\n",
                                            "function pushFiles() {\n",
                                            "    scp -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /opt/bgp_peers.sh admin@${1}:~/bgp_peers.sh\n",
                                            "    scp -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /opt/bgp_peers.yaml admin@${1}:~/bgp_peers.yaml\n",
                                            "    ssh -i /home/centos/privatekey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no admin@${1} \"chmod +x ~/bgp_peers.sh\"\n",
                                            "}\n",
                                            "#Find the IP address of the Master of the Kubernetes cluster and \n",
                                            "#replace put it into the bgp_peers.sh file.\n",
                                            "masterIP=$( kubectl get ep | awk '/^kubernetes / { print $2 }' | cut -d: -f1 )\n",
                                            "sudo sed -i \"s|REPLACEME|$masterIP|\" /opt/bgp_peers.sh\n",
                                            "#\n",
                                            "#Push the files to each of the nodes.\n",
                                            "exec 3</tmp/nodes\n",
                                            "while IFS='' read -r -u 3 line || [[ -n \"$line\" ]] \n",
                                            "do\n",
                                            "pushFiles ${line}\n",
                                            "done\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/bgp_peers.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "#\n",
                                            "sudo ETCD_ENDPOINTS=http://REPLACEME:4001 calicoctl create -f ~/bgp_peers.yaml\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/f5_container_connector_k8s_config.json": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"name\":\"f5-k8s-controller\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"template\":{\"metadata\":{\"name\":\"f5-k8s-controller\",\"labels\":{\"app\":\"f5-k8s-controller\"}},\"spec\":{\"containers\":[{\"name\":\"f5-k8s-controller\",\"image\":\"localhost:5000/cc\",\"env\":[{\"name\":\"BIGIP_USERNAME\",\"valueFrom\":{\"secretKeyRef\":{\"name\":\"bigip-credentials\",\"key\":\"username\"}}},{\"name\":\"BIGIP_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"name\":\"bigip-credentials\",\"key\":\"password\"}}},{\"name\":\"BIGIP_URL\",\"valueFrom\":{\"secretKeyRef\":{\"name\":\"bigip-credentials\",\"key\":\"url\"}}}],\"command\":[\"/app/bin/k8s-bigip-ctlr\"],\"args\":[\"--bigip-url=$(BIGIP_URL)\",\"--bigip-username=$(BIGIP_USERNAME)\",\"--bigip-password=$(BIGIP_PASSWORD)\",\"--namespace=default\",\"--bigip-partition=kubernetes\",\"--pool-member-type=cluster\"]}]}}}}"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/deploy_f5_container_connector.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "kubectl create -f /opt/f5_container_connector_k8s_config.json -n kube-system\n",
                                            "kubectl get pods -n kube-system\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/calico.yaml":{
                                "source": "https://raw.githubusercontent.com/gregcoward/awstraining/master/calico.yaml",
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/deploy_calico.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "#\n",
                                            "masterIP=$( kubectl get ep | awk '/^kubernetes / { print $2 }' | cut -d: -f1 )\n",
                                            "sudo sed -i \"s|REPLACEME|$masterIP|\" /opt/calico.yaml\n",
                                            "kubectl create -f /opt/calico.yaml -n kube-system\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/nginx.json": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{\"apiVersion\":\"extensions/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"name\":\"my-nginx\"},\"spec\":",
                                            "{\"replicas\":2,\"template\":{\"metadata\":{\"labels\":{\"run\":\"my-nginx\"}},\"spec\":{\"containers\":[{\"name\"",
                                            ":\"my-nginx\",\"image\":\"nginx\",\"ports\":[{\"containerPort\":80}]}]}}}}"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/deploy_nginx_workload.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "#\n",
                                            "#Deploy the NGINX workload containers.\n",
                                            "kubectl create -f /opt/nginx.json\n",
                                            "#\n"                                        
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "centos",
                                "group": "centos"
                            },
                            "/opt/appConfiguartion.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash -xe\n",
                                            "#\n",
                                            "#Update yum and system.\n",
                                            "function updateYum() {\n",
                                            "    echo \"**********Update yum and system.**********\"\n",
                                            "    yum clean all\n",
                                            "    yum -y update\n",
                                            "    yum -y install bind-utils\n",
                                            "}\n",
                                            "updateYum\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Updated yum and system.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Failed to update yum and system.**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "#Install jq\n",
                                            "function installJq() {\n",
                                            "    echo \"**********Install jq.**********\"\n",
                                            "    curl -Lk https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -o /opt/jq-linux64\n",
                                            "    chmod +x /opt/jq-linux64\n",
                                            "    ln -s /opt/jq-linux64 /usr/local/bin/jq\n",
                                            "}\n",
                                            "installJq\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Installed jq.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Failed to install jq.**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "#Install kubectl\n",
                                            "function installKubectl() {\n",
                                            "    echo \"**********Install kubectl.**********\"\n",
                                            "    curl -Lk https://github.com/kubernetes/kubernetes/releases/download/v1.4.9/kubernetes.tar.gz -o /opt/kubernetes.tar.gz\n",
                                            "    tar -zxvf /opt/kubernetes.tar.gz\n",
                                            "    mv /opt/aws/kubernetes/platforms/linux/amd64/kubectl /usr/local/bin/kubectl\n",
                                            "    chmod +x /usr/local/bin/kubectl\n",
                                            "}\n",
                                            "installKubectl\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Installed kubectl.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Failed to install kubectl.**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "#Install kops\n",
                                            "function installKops() {\n",
                                            "    echo \"**********Install KOPS.**********\"\n",
                                            "    curl -Lk https://github.com/kubernetes/kops/releases/download/1.5.1/kops-linux-amd64 -o /opt/kops-linux-amd64\n",
                                            "    chmod +x /opt/kops-linux-amd64\n",
                                            "    mv /opt/kops-linux-amd64 /usr/local/bin/kops\n",
                                            "}\n",
                                            "installKops\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Installed KOPS.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Failed to install KOPS.**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "function installPip() {\n",
                                            "    echo \"**********Install PIP.**********\"\n",
                                            "    curl -Lk https://bootstrap.pypa.io/get-pip.py -o /opt/get-pip.py\n",
                                            "    python /opt/get-pip.py --user\n",
                                            "    export PATH=~/.local/bin:$PATH\n",
                                            "    echo export PATH=~/.local/bin:$PATH >> ~/.bashrc\n",
                                            "}\n",
                                            "installPip\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Installed PIP.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Failed to install PIP.**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "function installAwsCli() {\n",
                                            "    echo \"**********Install AWS CLI.**********\"\n",
                                            "    pip install awscli --upgrade --user\n",
                                            "}\n",
                                            "installAwsCli\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Installed AWS CLI.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Failed to install AWS CLI.**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "#Write new id_rsa_pub file\n",
                                            "function writeRSA() {\n",
                                            "    echo \"**********Write new id_rsa_pub file.**********\"\n",
                                            "    echo $(sed  -n -e 's/^.*\\(ssh-rsa \\)/\\1/p' ~/.ssh/authorized_keys) > ~/.ssh/id_rsa.pub\n",
                                            "    cp ~/.ssh/id_rsa.pub /home/centos/.ssh/id_rsa.pub\n",
                                            "    cp ~/.ssh/id_rsa.pub /opt/id_rsa.pub\n",
                                            "    chmod 400 ~/.ssh/id_rsa.pub\n",
                                            "    chmod 400 /home/centos/.ssh/id_rsa.pub\n",
                                            "    chmod 400 /opt/id_rsa.pub\n",
                                            "}\n",
                                            "writeRSA\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Wrote id_rsa_pub.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Failed to write id_rsa_pub.**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "#Create K8s Cluster\n",     
                                            "function createCluster() {\n",
                                            "    echo \"**********Create the K8's Cluster.**********\"\n",                                                                                  
                                            "    nohup /opt/create_cluster.sh &\n",
                                            "    wait\n",
                                            "}\n",
                                            "createCluster\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Create cluster succeeded.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Create Cluster Failed!**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "#Update K8s Cluster\n",
                                            "function updateCluster() {\n",
                                            "    echo \"**********Run Update to actually deploy the K8's Cluster.**********\"\n",
                                            "    nohup /opt/update_cluster.sh &\n",
                                            "    wait\n",
                                            "}\n",
                                            "updateCluster\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Create cluster succeeded.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Create Cluster Failed!**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "function moveKubeConfig() {\n",
                                            "    echo \"**********Move kube config file to the proper directories.**********\"\n",
                                            "    mkdir /home/centos/.kube\n",
                                            "    chown centos:centos /home/centos/.kube\n",
                                            "    cp /opt/aws/.kube/config /home/centos/.kube/config\n",
                                            "    chown centos:centos /home/centos/.kube/config\n",
                                             "}\n",
                                             "moveKubeConfig\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Kube config moved.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Move kube config Failed!**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "echo \"**********Wait 7 minutes while the K8's cluster builds.**********\"\n",
                                            "sleep 7m\n",
                                            "function createBigIpSecret() {\n",
                                            "    echo \"**********Create the BIG-IP secret that CC uses to login to the BIG-IP with and control it.**********\"\n",
                                            "    nohup /opt/create_secret.sh &\n",
                                            "    wait\n",
                                            "}\n",
                                            "createBigIpSecret\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********BIG-IP Secret Created.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Creat BIG-IP Secret Failed!**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "function ccStage() {\n",
                                            "    echo \"**********Stage the Container Connector in a local respository container on each of the K8's nodes.**********\"\n",
                                            "    nohup /opt/cc_stage.sh &\n",
                                            "    wait\n",
                                            "}\n",
                                            "ccStage\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Container Connector Succeeded.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Container Connector Staging Failed!**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",
                                            "function deployCalico() {\n",
                                            "    echo \"**********Deploy Calico for BGP Route Summarization.**********\"\n",
                                            "    nohup /opt/deploy_calico.sh &\n",
                                            "    wait\n", 
                                            "}\n",
                                            "deployCalico\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Deploy Calico Succeeded.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Deploy Calico Failed!**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n",   
                                            "function fixBgpPeers() {\n",                                        
                                            "    echo \"**********Fix the bgp_peers.sh file with the correct IP information for the K8's master node.**********\"\n",
                                            "    nohup /opt/fix_bgp_peers.sh &\n",
                                            "    wait\n",
                                            "}\n",
                                            "fixBgpPeers\n",
                                            "if [[ $? == 0 ]]; then\n",
                                            "    echo \"**********Fix bgp_peers.sh Succeeded.**********\"\n",
                                            "else\n",
                                            "    echo \"**********Fix bgp_peers.sh Failed!**********\"\n",
                                            "    /opt/signalFailure.sh\n",
                                            "    exit 12\n",                                            
                                            "fi\n", 
                                            "date\n",
                                            "#**********Delete the K8's secret file that contains sensitive data.**********\n",
                                            "echo \"Finished Installing tools and K8's Cluster\"",
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "001-app-config": {
                                "command": "/opt/appConfiguartion.sh &>> /var/log/appconfig.log"
                            },
                            "002-signal-done": {
                                "command": "/opt/signalDone.sh &>> /var/log/signal.log"
                            }
                        }
                    }
                },
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "accessKeyId": { "Ref": "accessKey" },
                        "secretKey": { "Ref": "secretKey" },
                        "buckets": [ "f5awstraining2017" ]
                    }
                }
            },
            "Properties": {
                "InstanceType": {
                    "Ref": "KopsInstanceType"
                },
                "ImageId": {
                    "Ref": "KopsInstanceAMI"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SubnetId": {
                    "Ref": "internalSubnet"
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "KopsInstanceSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "#\n",
                                "cd /opt\n",
                                "curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "tar -xvpf aws-cfn-bootstrap-latest.tar.gz\n",
                                "cd aws-cfn-bootstrap-1.4/\n",
                                "python setup.py build\n",
                                "python setup.py install\n",
                                "ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup\n",
                                "chmod 775 /usr/init/redhat/cfn-hup\n",
                                "cd /opt\n",
                                "mkdir aws\n",
                                "cd aws\n",
                                "mkdir bin\n",
                                "ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup\n",
                                "ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init\n",
                                "ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal\n",
                                "ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader\n",
                                "ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata\n",
                                "ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event\n",
                                "ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result\n",
                                "\n",
                                "/opt/aws/bin/cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource KopsInstance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "if [[ $? -ne 0 ]]; then\n",
                                "/opt/aws/bin/cfn-signal -e $? '",
                                {
                                    "Ref": "KopsInstanceWaitHandle"
                                },
                                "'\n",                                            
                                "fi\n"
                            ]
                        ]
                    }
                }
            }
        },
        "KopsInstanceWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "KopsInstance",
            "Properties": {
                "Handle": {
                    "Ref": "KopsInstanceWaitHandle"
                },
                "Count": "1",
                "Timeout": "2100"
            }
        },
        "KopsInstanceWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        }
    },
    "Outputs": {
        "ToolVM": {
            "Description": "The IP address to connect to the Tool-VM jump box.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "BIGIPExternalEip"
                        }
                    ]
                ]
            }
        },
        "BIGIPGUI": {
            "Description": "The URL to connect to the BIG-IP management GUI.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "BIGIPInstance",
                                "PublicDnsName"
                            ]
                        }
                    ]
                ]
            }
        },
        "PrivateVIPIP": {
            "Description": "The private IP address that will be used to configure the VIP for the application.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {"Fn::Select": ["0",{"Fn::GetAtt": ["BigipExternalInterface","SecondaryPrivateIpAddresses"]}]}
                    ]
                ]
            }
        },
        "ExternalVIPIP": {
            "Description": "The external IP address to connect to in order to access the applicaiton from the Internet.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "BIGIPExternalVIPEip"
                        }
                    ]
                ]
            }
        }
    }
}
