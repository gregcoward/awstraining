{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates a full deployment of a VPC and all supporting infrastructure as well as a single CentOS 7 server then uploads the App Connector tarball and finally starts App Connector.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Basics"
          },
          "Parameters": [
            "appConnectorName",
            "KeyName",
            "adminUsername",
            "adminPassword"
          ]
        },
        {
          "Label": {
            "default": "Size"
          },
          "Parameters": [
            "appConnectorType"
          ]
        },
        {
          "Label": {
            "default": "Settings"
          },
          "Parameters": [
            "appConnectorAMI"
          ]
        }
      ],
      "ParameterLabels": {}
    }
  },
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },
    "appConnectorName": {
      "Description": "The name of the application connector.",
      "Type": "String"
    },
    "adminUsername": {
      "Type": "String",
      "Description": "An admin username for loging into the application connector.",
      "MaxLength": "255",
      "MinLength": "1"
    },
    "adminPassword": {
      "Type": "String",
      "NoEcho": "true",
      "Description": "A password that will be used to login into the applicaiton connector.",
      "MaxLength": "255",
      "MinLength": "1"
    },
    "appConnectorType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "m1.small"
      ],
      "ConstraintDescription": "Choose one of the following."
    },
    "appConnectorAMI": {
      "Description": "Ubuntu Version and Region AMI",
      "Type": "String",
      "Default": "ami-d2c924b2",
      "AllowedValues": [
        "ami-d2c924b2",
        "ami-6d1c2007"
      ]
    }
  },
  "Resources": {
    "StackVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": "10.10.0.0/16",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "VPC-",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "externalSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "StackVPC"
        },
        "CidrBlock": "10.10.10.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ExternalSubnet-",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "internalSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "StackVPC"
        },
        "CidrBlock": "10.10.20.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "internalSubnet-",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "StackInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "InternetGateway-",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "StackVPC"
        },
        "InternetGatewayId": {
          "Ref": "StackInternetGateway"
        }
      }
    },

    "ServerNATGatewayEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {}
    },

    "ServerNATGateway": {
      "DependsOn": "internalSubnetRouteTableAssociation",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ServerNATGatewayEIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "externalSubnet"
        }
      }
    },

    "ExternalRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "StackVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ExternalRouteTable-",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "ExternalRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "ExternalRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "StackInternetGateway"
        }
      }
    },

    "ExternalSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "externalSubnet"
        },
        "RouteTableId": {
          "Ref": "ExternalRouteTable"
        }
      }
    },

    "internalRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "StackVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "internalRouteTable-",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "ServerRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "internalRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "ServerNATGateway"
        }
      }
    },

    "internalSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "internalSubnet"
        },
        "RouteTableId": {
          "Ref": "internalRouteTable"
        }
      }
    },

    "appConnectorSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP and SSH",
        "VpcId": {
          "Ref": "StackVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "appConnectorInstance": {
        "DependsOn": "ServerNATGateway",
        "Type": "AWS::EC2::Instance",
        "Metadata": {
            "AWS::CloudFormation::Init": {
                "config": {
                    "files": {
                        "/config/installCloudLibs.sh": {
                            "content": {
                                "Fn::Join": [
                                    "\n",
                                    [
                                        "#!/bin/bash",
                                        "echo about to execute",
                                        "echo expanding f5-cloud-libs.tar.gz",
                                        "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/",
                                        "echo cloud libs install complete",
                                        "touch /config/cloud/cloudLibsReady"
                                    ]
                                ]
                            },
                            "mode": "000755",
                            "owner": "root",
                            "group": "root"
                        },
                        "/config/cloud/aws/firstrun.utils": {
                            "group": "root",
                            "mode": "000755",
                            "owner": "root",
                            "source": "http://cdn.f5.com/product/templates/utils/firstrun.utils"
                        },
                        "/config/cloud/f5-cloud-libs.tar.gz": {
                            "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v2.0.1/dist/f5-cloud-libs.tar.gz",
                            "mode": "000644",
                            "owner": "root",
                            "group": "root"
                        },
                        "/config/waitThenRun.sh": {
                            "content": {
                                "Fn::Join": [
                                    "\n",
                                    [
                                        "#!/bin/bash",
                                        "while true; do echo waiting for cloud libs install to complete",
                                        "    if [ -f /config/cloud/cloudLibsReady ]; then",
                                        "        echo cloud libs installed",
                                        "        break",
                                        "    else",
                                        "        sleep 10",
                                        "    fi",
                                        "done",
                                        "\"$@\""
                                    ]
                                ]
                            },
                            "mode": "000755",
                            "owner": "root",
                            "group": "root"
                        },
                        "/config/cloud/aws/createUser.sh": {
                            "content": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword\n",
                                        "PASSWORD=",
                                        {
                                            "Ref": "adminPassword"
                                        },
                                        "\n",
                                        "if [ \"$1\" = admin ]; then\n",
                                        "    tmsh modify auth user \"$1\" password ${PASSWORD}\n",
                                        "else\n",
                                        "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }\n",
                                        "fi\n"
                                    ]
                                ]
                            },
                            "mode": "000755",
                            "owner": "root",
                            "group": "root"
                        },
                        "/config/cloud/aws/getNameServer.sh": {
                            "content": {
                                "Fn::Join": [
                                    "\n",
                                    [
                                        "INTERFACE=$1",
                                        "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                        "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                        "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                                        "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                                        "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                                        "echo $NAME_SERVER"
                                    ]
                                ]
                            },
                            "mode": "000755",
                            "owner": "root",
                            "group": "root"
                        },                        
                        "/config/cloud/aws/signalDone.sh": {
                            "content": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "#!/bin/bash\n",
                                        "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-signal -e $? '",
                                        {
                                            "Ref": "BIGIPWaitHandle"
                                        },
                                        "'\n"
                                    ]
                                ]
                            },
                            "mode": "000755",
                            "owner": "root",
                            "group": "root"
                        },
                        "/opt/proxy-0-0-1.tgz": {
                            "source": "https://raw.githubusercontent.com/gregcoward/awstraining/master/proxy-0-0-1.tgz",
                            "mode": "000644",
                            "owner": "root",
                            "group": "root"
                        },
                        "/opt/appConfiguartion.sh": {
                            "content": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "#!/bin/bash -xe\n",
                                        "#\n",                                        
                                        "# Download Node\n",
                                        "curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -\n",
                                        "#\n",
                                        "# Install Node\n",
                                        "yum -y install nodejs\n",
                                        "#\n",
                                        "# Extract the proxy\n",
                                        "cd /opt\n",
                                        "tar -zxvf /opt/proxy-0-0-1.tgz\n",
                                        "#\n",
                                        "# Start the proxy\n",
                                        "node /opt/proxy/lib/Proxy.js -n ",
                                        {
                                            "Ref": "appConnectorName"
                                        },
                                        " -u ",
                                        {
                                            "Ref": "adminUsername"
                                        },
                                        " -w ",
                                        {
                                            "Ref": "adminPassword"
                                        },
                                        "\n"
                                    ]
                                ]
                            },
                            "mode": "000755",
                            "owner": "root",
                            "group": "root"
                        }
                    },
                    "commands": {
                        "001-app-config": {
                            "command": {
                                "Fn::Join": [
                                    " ",
                                    [
                                        "nohup /config/waitThenRun.sh",
                                        "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                        "--file /config/cloud/aws/appConfiguartion.sh",
                                        "--cwd /config/cloud/aws",
                                        "-o /var/log/appConfiguartion.log",
                                        "--wait-for ONBOARD_DONE",
                                        "--signal APP_CONFIG_DONE",
                                        "--background",
                                        "&>> /var/log/cloudlibs-install.log &"
                                    ]
                                ]
                            }
                        },
                        "002-signal-done": {
                            "command": {
                                "Fn::Join": [
                                    " ",
                                    [
                                        "nohup /config/waitThenRun.sh",
                                        "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                        "--file /config/cloud/aws/signalDone.sh",
                                        "--cwd /config/cloud/aws",
                                        "-o /var/log/signlDone.log",
                                        "--wait-for APP_CONFIG_DONE",
                                        "--background",
                                        "&>> /var/log/cloudlibs-install.log &"
                                    ]
                                ]
                            }
                        }
                    }
                }
            }
        },
        "Properties": {
            "InstanceType": {
          "Ref": "appConnectorType"
        },
        "ImageId": {
          "Ref": "appConnectorAMI"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "externalSubnet"
        },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "appConnectorSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "#\n",
                "cd /opt\n",
                "curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "tar -xvpf aws-cfn-bootstrap-latest.tar.gz\n",
                "cd aws-cfn-bootstrap-1.4/\n",
                "python setup.py build\n",
                "python setup.py install\n",
                "ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup\n",
                "chmod 775 /usr/init/redhat/cfn-hup\n",
                "cd /opt\n",
                "mkdir aws\n",
                "cd aws\n",
                "mkdir bin\n",
                "ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup\n",
                "ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init\n",
                "ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal\n",
                "ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader\n",
                "ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata\n",
                "ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event\n",
                "ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result\n",
                "\n",
                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v ",
                " --stack ",
                {
                    "Ref": "AWS::StackName"
                },
                " --resource BIGIPInstance",
                " --region ",
                {
                    "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    }
  },

  "Outputs": {
    "ServerURL": {
      "Description": "The URL to connect to the Application Connector.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "appConnectorInstance",
                "PublicDnsName"
              ]
            },
            ":8080/"
          ]
        ]
      }
    }
  }
}